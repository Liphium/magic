package tui

import (
	"fmt"
	"os"
	"os/exec"

	"github.com/Liphium/magic/integration"
	"github.com/Liphium/magic/mconfig"
	"github.com/Liphium/magic/mrunner"
	"github.com/tiemingo/greentea"
	"github.com/urfave/cli/v3"
)

const defaultScriptRunFile = `// Automagically generated by Magic
package main

import (
	"os"
	"log"
	
	"github.com/Liphium/magic/mconfig"
)

func main() {
	if len(os.Args) < 2 {
		log.Fatalln("Please provide the plan as a command line argument (in printable form).")
	}

	// Parse the plan
	plan, err := mconfig.FromPrintable(os.Args[1])
	if err != nil {
		log.Fatalln("Couldn't parse printable plan:", err)
	}

	// Run the script
	%s(plan%s)
}
`

// Command: run [path] [arguments...]
func RunCommand(cmd *cli.Command, logLeaf *greentea.StringLeaf, quitLeaf *greentea.Leaf[error]) {

	// Make sure there is a script path
	if cmd.Args().Len() < 1 {
		logLeaf.Println("usage: run [path] [arguments...]")
		return
	}
	fp := cmd.Args().Get(0)

	// Save the current working directory for later
	wOld, err := os.Getwd()
	if err != nil {
		logLeaf.Printlnf("couldn't get working directory: %s", err)
		return
	}

	// Get the magic directory
	mDir, err := integration.GetMagicDirectory(5) // because cwd is inside ./magic/cache/config_default
	if err != nil {
		logLeaf.Printlnf("can't get magic directory: %s", err)
		return
	}

	// Create a new factory
	factory := mrunner.NewFactory(mDir)

	// Prepare the folder using the factory
	scriptDir, err := factory.GenerateScriptFolder(fp, defaultScriptRunFile, cmd.Args().Slice()[1:], func(s string) {
		logLeaf.Println(s)
	})
	if err != nil {
		logLeaf.Printlnf("couldn't generate script folder: %s", err)
		return
	}

	// Change working directory to module directory
	if err := os.Chdir(scriptDir); err != nil {
		logLeaf.Println("ERROR: couldn't change working dir to script dir: ", err)
		return
	}

	// Run the script
	logLeaf.Printlnf("Executing script %s...", fp)
	printable, err := mconfig.CurrentPlan.ToPrintable()
	if err != nil {
		logLeaf.Printlnf("couldn't stringify plan: %s", err)
		return
	}
	if err := integration.BuildThenRun(integration.RunConfig{
		Print: func(s string) {
			logLeaf.Println(s)
		},

		Start: func(cmd *exec.Cmd) {
			if err = os.Chdir(wOld); err != nil {
				quitLeaf.Append(fmt.Errorf("ERROR: couldn't change working directory: %s", err))
			}
		},

		Directory: scriptDir,
		Arguments: []string{printable},
	}); err != nil {
		logLeaf.Printlnf("couldn't run script: %s", err)
		return
	}
	logLeaf.Printlnf("Successfully executed script %s.", fp)
}
